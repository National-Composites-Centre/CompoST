Architecture
============

.. image:: NCC-TEC-4376.*
    :width: 1000
	
On the figure above, arrows point from an object 1 to object 2, where object 1 inherits from object 2.

The figure is also work-in-progress. The outline titled "mostly fixed" houses the objects that have been implemented and used. These will hopefully see only minor adjustments. Objects outside this area might end up being standardised differently than currently suggested.

All fields are optional unless otherwise specified, or unless required to construct specific object.

Where the same attribute is being called in parent and child (e.g. axis being referenced in ply, and in some of corresponding cut pieces), the more detailed (child) component supersedes the corresponding parent definition.


CompositeDB object is the main object of the Composite Standard. All objects are stored in lists named all***.  
	
	
.. py:function:: CompositeStandard.CompositeDB(BaseModel)

	All elements and all geometry are all stored here and used elsewhere as refrence
	Points are stored withing those, as referencing is not efficient
	
	BaseModel input signifies the default generation with Pydantic library, without any local parent.
	
	:param name: str - name
	:param rootElements: list - List of CompositeElement type objects
	:param allEvents: list  - List of "events" objects - all = exhaustive list
	:param allGeometry: list - list of "GeometricElement" objects - all = exhaustive list
	:param allStages: list - manuf process - all = exhaustive list
	:param allMaterials: list - List of "Material" objects - all = exhaustive list
	:param allAxisSystems: dict -
	:param fileMetadata: object - list of all "axisSystems" objects = exhaustive list
	
.. py:function:: CompositeStandard.FileMetadata(BaseModel)
	
	Metadata related to this particular part.
	
	:param lastModified: date 
	:param lastModifiedBy: str - latest changes to the file have been done by
	:param author: str - initial part definition created by
	:param version: str - version of the CompoST used to work with this file
	:param layupDefinitionVersion: str - initial part layup definition generated by 
	:param cadFile: str - related CAD file, if references to geometries are required, .step format is recommended. Should be stored in same folder.
	:param maxID: int - maxium ID used for any object int the file, used for preventing duplicaiton of IDs
	:param cadFilepath: str - should only be used when CAD could not be stored in same folder as this file
	
	
.. py:function:: CompositeStandard.CompositeDBItem(BaseModel)

	:param memberName: str - name
	:param additionalParameters: dict - to hold use-case specific values (to be further defined)
	:param additionalProperties: dict - to hold use-case specific objects (to be further defined)
	:param stageIDs: (TODO) - stages will define what part of part-processing this object came from
	:param batchIDs: (TODO) - reference to batch of components 
	:param ID: int - used for references between objects


.. py:function:: CompositeStandard.GeometricElement(CompositeDBItem)
	
	:param source: str - the software, script, or database that this object originated from
	
.. py:function:: CompositeStandard.CompositeElement(CompositeDBItem)
	
	:param database: object - :py:meth:`~CompositeStandard.CompositeDB.get` 
	:param subComponent: list - :py:meth:`~CompositeStandard.CompositeDBItem.get` , either as object or ID
	:param mappedProperties: dict - other properties not covered by materials class or similar
	:param mappedRequirements: list - list of objects of Requirement type, to be further specified
	:param defects: list - list of "defects" type objects
	:param axisSystemID: int - refernce to object in allAxisSystems specified by ID
	:param referencedBy: list - optional list of objects that currently reference this object
	:param status: str - #TODO
	
.. py:function:: CompositeStandard.Point(GeometricElement)

	:param x: float 
	:param y: float
	:param z: float
	
.. py:function:: CompositeStandard.Line(GeometricElement)

	:param points: list - list of two points , no more - no less
	:param IDs: list - list of two IDs corresponding to points, no more - no less